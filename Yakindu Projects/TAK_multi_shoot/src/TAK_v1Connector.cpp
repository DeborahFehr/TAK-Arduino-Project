/* Generated by YAKINDU Statechart Tools for Arduino v0.9.0 */

#include "TAK_v1Connector.h"
// #include <avr/power.h>
#include <Servo.h>

const Servo servo;
const int relais_pin=6;
const int vib_pin=7;
const int servo_pin=8;

volatile bool vibration = false;

int read_vibration_sensor() {
	return digitalRead(vib_pin);
}

TAK_v1Connector::TAK_v1Connector(TAK_v1* statemachine) {
	this->statemachine = statemachine;
}

/*
 * Initialize the hardware.
 */
void TAK_v1Connector::init() {

	pinMode(relais_pin, OUTPUT);
	pinMode(vib_pin, INPUT);

	servo.attach(servo_pin); // @suppress("Invalid arguments")
	servo.write(180); // @suppress("Invalid arguments")

}

/*
 * Raise state machine events before processing them in the state machine's runCycle().
 */
void TAK_v1Connector::raiseEvents() {

	 if (vibration) {
	     statemachine->raise_vibration(read_vibration_sensor());
	     vibration = false;
	 }
}

/*
 * Update the hardware depending on the state machine's state.
 */
void TAK_v1Connector::syncState() {

	if (read_vibration_sensor() == 1){
		vibration = true;
		raiseEvents();
	}

	digitalWrite(relais_pin, statemachine->getDefaultSCI()->get_relais());
	servo.write(statemachine->getDefaultSCI()->get_servo_deg()); // @suppress("Invalid arguments")

}

/*
 * Optimize power consumption by turning off hardware modules that are not needed.
 */
uint8_t TAK_v1Connector::prepareSleepMode() {
	// Some of the functions of <avr/power.h> may not be supported by the
	// actual microprocessor you are using.
	// This method is only called in case you are using an AVR hardware timer.
	// e.g.
	// power_adc_disable();
	// power_spi_disable();
	// power_timer0_disable();
	// power_timer1_disable() ;
	// power_timer2_disable() ;
	// power_timer3_disable() ;
	// power_twi_disable();
	// power_usart0_disable();
	// power_usb_disable();
	
	return SLEEP_MODE_IDLE;
}
