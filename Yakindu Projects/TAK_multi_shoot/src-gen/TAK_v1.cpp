/* Generated by YAKINDU Statechart Tools for Arduino v0.9.0 */

#include "TAK_v1.h"

/*! \file Implementation of the state machine 'TAK_v1'
*/




TAK_v1::TAK_v1()  :
timer(sc_null),
stateConfVectorPosition(0),
iface()
{
}

TAK_v1::~TAK_v1()
{
}


void TAK_v1::init()
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = TAK_v1_last_state;
	
	stateConfVectorPosition = 0;

	clearInEvents();
	clearOutEvents();
	
	/* Default init sequence for statechart TAK_v1 */
	iface.relais = false;
	iface.servo_deg = 0;
	iface.vib_measurement = 0;
}

void TAK_v1::enter()
{
	/* Default enter sequence for statechart TAK_v1 */
	enseq_main_region_default();
}

void TAK_v1::exit()
{
	/* Default exit sequence for statechart TAK_v1 */
	exseq_main_region();
}

sc_boolean TAK_v1::isActive() const
{
	return stateConfVector[0] != TAK_v1_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean TAK_v1::isFinal() const
{
   return false;}

void TAK_v1::runCycle()
{
	
	clearOutEvents();
	for (stateConfVectorPosition = 0;
		stateConfVectorPosition < maxOrthogonalStates;
		stateConfVectorPosition++)
		{
			
		switch (stateConfVector[stateConfVectorPosition])
		{
		case main_region_Detection :
		{
			main_region_Detection_react(true);
			break;
		}
		case main_region_Verification :
		{
			main_region_Verification_react(true);
			break;
		}
		case main_region_Shooting :
		{
			main_region_Shooting_react(true);
			break;
		}
		case main_region_Reset :
		{
			main_region_Reset_react(true);
			break;
		}
		default:
			break;
		}
	}
	clearInEvents();
}

void TAK_v1::clearInEvents()
{
	iface.vibration_raised = false;
	timeEvents[0] = false; 
	timeEvents[1] = false; 
	timeEvents[2] = false; 
}

void TAK_v1::clearOutEvents()
{
}


void TAK_v1::setTimer(TimerInterface* timerInterface)
{
	this->timer = timerInterface;
}

TimerInterface* TAK_v1::getTimer()
{
	return timer;
}

sc_integer TAK_v1::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void TAK_v1::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		*(sc_boolean*)evid = true;
	}				
}

sc_boolean TAK_v1::isStateActive(TAK_v1States state) const
{
	switch (state)
	{
		case main_region_Detection : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_DETECTION] == main_region_Detection
			);
		case main_region_Verification : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_VERIFICATION] == main_region_Verification
			);
		case main_region_Shooting : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_SHOOTING] == main_region_Shooting
			);
		case main_region_Reset : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_RESET] == main_region_Reset
			);
		default: return false;
	}
}

TAK_v1::DefaultSCI* TAK_v1::getDefaultSCI()
{
	return &iface;
}
/* Functions for event vibration in interface DefaultSCI */
void TAK_v1::DefaultSCI::raise_vibration(sc_integer value)
{
	vibration_value = value;
	vibration_raised = true;
}
void TAK_v1::raise_vibration(sc_integer value)
{
	iface.raise_vibration(value);
}
sc_boolean TAK_v1::DefaultSCI::get_relais() const
{
	return relais;
}

sc_boolean TAK_v1::get_relais() const
{
	return iface.relais;
}

void TAK_v1::DefaultSCI::set_relais(sc_boolean value)
{
	this->relais = value;
}

void TAK_v1::set_relais(sc_boolean value)
{
	iface.relais = value;
}

sc_integer TAK_v1::DefaultSCI::get_servo_deg() const
{
	return servo_deg;
}

sc_integer TAK_v1::get_servo_deg() const
{
	return iface.servo_deg;
}

void TAK_v1::DefaultSCI::set_servo_deg(sc_integer value)
{
	this->servo_deg = value;
}

void TAK_v1::set_servo_deg(sc_integer value)
{
	iface.servo_deg = value;
}

sc_integer TAK_v1::DefaultSCI::get_vib_measurement() const
{
	return vib_measurement;
}

sc_integer TAK_v1::get_vib_measurement() const
{
	return iface.vib_measurement;
}

void TAK_v1::DefaultSCI::set_vib_measurement(sc_integer value)
{
	this->vib_measurement = value;
}

void TAK_v1::set_vib_measurement(sc_integer value)
{
	iface.vib_measurement = value;
}


// implementations of all internal functions

sc_boolean TAK_v1::check_main_region__choice_0_tr0_tr0()
{
	return (iface.vib_measurement) == (1);
}

void TAK_v1::effect_main_region__choice_0_tr0()
{
	enseq_main_region_Shooting_default();
}

void TAK_v1::effect_main_region__choice_0_tr1()
{
	enseq_main_region_Detection_default();
}

/* Entry action for state 'Verification'. */
void TAK_v1::enact_main_region_Verification()
{
	/* Entry action for state 'Verification'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[0]), 300, false);
}

/* Entry action for state 'Shooting'. */
void TAK_v1::enact_main_region_Shooting()
{
	/* Entry action for state 'Shooting'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[1]), 1000, false);
	iface.relais = true;
	iface.servo_deg = 30;
}

/* Entry action for state 'Reset'. */
void TAK_v1::enact_main_region_Reset()
{
	/* Entry action for state 'Reset'. */
	timer->setTimer(this, (sc_eventid)(&timeEvents[2]), 5000, false);
	iface.relais = false;
	iface.servo_deg = 180;
}

/* Exit action for state 'Verification'. */
void TAK_v1::exact_main_region_Verification()
{
	/* Exit action for state 'Verification'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* Exit action for state 'Shooting'. */
void TAK_v1::exact_main_region_Shooting()
{
	/* Exit action for state 'Shooting'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[1]));
}

/* Exit action for state 'Reset'. */
void TAK_v1::exact_main_region_Reset()
{
	/* Exit action for state 'Reset'. */
	timer->unsetTimer(this, (sc_eventid)(&timeEvents[2]));
}

/* 'default' enter sequence for state Detection */
void TAK_v1::enseq_main_region_Detection_default()
{
	/* 'default' enter sequence for state Detection */
	stateConfVector[0] = main_region_Detection;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Verification */
void TAK_v1::enseq_main_region_Verification_default()
{
	/* 'default' enter sequence for state Verification */
	enact_main_region_Verification();
	stateConfVector[0] = main_region_Verification;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Shooting */
void TAK_v1::enseq_main_region_Shooting_default()
{
	/* 'default' enter sequence for state Shooting */
	enact_main_region_Shooting();
	stateConfVector[0] = main_region_Shooting;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Reset */
void TAK_v1::enseq_main_region_Reset_default()
{
	/* 'default' enter sequence for state Reset */
	enact_main_region_Reset();
	stateConfVector[0] = main_region_Reset;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region main region */
void TAK_v1::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* Default exit sequence for state Detection */
void TAK_v1::exseq_main_region_Detection()
{
	/* Default exit sequence for state Detection */
	stateConfVector[0] = TAK_v1_last_state;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Verification */
void TAK_v1::exseq_main_region_Verification()
{
	/* Default exit sequence for state Verification */
	stateConfVector[0] = TAK_v1_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_Verification();
}

/* Default exit sequence for state Shooting */
void TAK_v1::exseq_main_region_Shooting()
{
	/* Default exit sequence for state Shooting */
	stateConfVector[0] = TAK_v1_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_Shooting();
}

/* Default exit sequence for state Reset */
void TAK_v1::exseq_main_region_Reset()
{
	/* Default exit sequence for state Reset */
	stateConfVector[0] = TAK_v1_last_state;
	stateConfVectorPosition = 0;
	exact_main_region_Reset();
}

/* Default exit sequence for region main region */
void TAK_v1::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of TAK_v1.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_Detection :
		{
			exseq_main_region_Detection();
			break;
		}
		case main_region_Verification :
		{
			exseq_main_region_Verification();
			break;
		}
		case main_region_Shooting :
		{
			exseq_main_region_Shooting();
			break;
		}
		case main_region_Reset :
		{
			exseq_main_region_Reset();
			break;
		}
		default: break;
	}
}

/* The reactions of state null. */
void TAK_v1::react_main_region__choice_0()
{
	/* The reactions of state null. */
	if (check_main_region__choice_0_tr0_tr0())
	{ 
		effect_main_region__choice_0_tr0();
	}  else
	{
		effect_main_region__choice_0_tr1();
	}
}

/* Default react sequence for initial entry  */
void TAK_v1::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_Detection_default();
}

sc_boolean TAK_v1::react() {
	/* State machine reactions. */
	return false;
}

sc_boolean TAK_v1::main_region_Detection_react(const sc_boolean try_transition) {
	/* The reactions of state Detection. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (((iface.vibration_raised)) && (((iface.vibration_value) == (1))))
			{ 
				exseq_main_region_Detection();
				enseq_main_region_Verification_default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean TAK_v1::main_region_Verification_react(const sc_boolean try_transition) {
	/* The reactions of state Verification. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (timeEvents[0])
			{ 
				exseq_main_region_Verification();
				iface.vib_measurement = iface.vibration_value;
				react_main_region__choice_0();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean TAK_v1::main_region_Shooting_react(const sc_boolean try_transition) {
	/* The reactions of state Shooting. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (timeEvents[1])
			{ 
				exseq_main_region_Shooting();
				enseq_main_region_Reset_default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}

sc_boolean TAK_v1::main_region_Reset_react(const sc_boolean try_transition) {
	/* The reactions of state Reset. */
	sc_boolean did_transition = try_transition;
	if (try_transition)
	{ 
		if ((react()) == (false))
		{ 
			if (timeEvents[2])
			{ 
				exseq_main_region_Reset();
				enseq_main_region_Detection_default();
			}  else
			{
				did_transition = false;
			}
		} 
	} 
	return did_transition;
}



